@startuml
abstract class Gate {
    + openGate() : void
    + closeGate() : void
}

class EntranceGate extends Gate {
}

class ExitGate extends Gate {
}

class ParkingGarage {
    - totalSpots : int
    - availableSpots : int
    + getAvailableSpots() : int
    + parkCar() : Ticket
    + exitCar(ticket : Ticket) : boolean
}

class ParkingSpot {
    - spotNumber : int
    - isOccupied : boolean
    + occupySpot() : void
    + freeSpot() : void
    + isAvailable() : boolean
}

class Ticket {
    - ticketId : String
    - issueTime : Date
    - paid : boolean
    + getFee(currentTime : Date) : double
    + pay(amount : double) : boolean
    + isPaid() : boolean
}

class Payment {
    - amount : double
    + processPayment(ticket : Ticket, amount : double) : boolean
}

class PaymentMachine {
    + payTicket(ticket : Ticket, amount : double) : boolean
}

class Display {
    - availableSpots : int
    + updateAvailableSpots(spots : int) : void
}

interface UserInterface {
    + printMessage(message : String) : void
    + getInput(prompt : String) : String
    + displayAvailableSpots(parkingGarage : ParkingGarage) : void
    + processPayment(ticket : Ticket, paymentMachine : PaymentMachine) : void
}

class Main {
    + main(args : String[]) : void
    + run() : void
}

' Associations with Multiplicity
ParkingGarage --> UserInterface : interacts with
Main --> ParkingGarage : manages
Main --> UserInterface : manages

' Composition relationships with Multiplicity
ParkingGarage *-- "0..*" ParkingSpot : contains
ParkingGarage *-- "1..2" Gate : has (1 EntranceGate, 1 ExitGate)

' Aggregation relationships with Multiplicity
ParkingSpot o-- "1" Ticket : associated with
ParkingGarage o-- "1" Display : updates
Ticket o-- "1" Payment : processes
PaymentMachine o-- "0..1" Payment : handles
@enduml
